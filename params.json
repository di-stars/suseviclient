{"name":"suseviclient","body":"Features\r\n--------\r\n\r\n* VM creation and provisioning from\r\n\r\n\t* ISO \r\n\t* VMDK\r\n\t* SUSE Studio\r\n\t* PXE \r\n\r\n* Cloning\r\n\r\n* Snapshotting\r\n\r\n* Virtual network management\r\n\r\n* VM control through VNC\r\n\r\n* Exporting to VMware Workstation/Player\r\n\r\nHow does it work?\r\n-----------------\r\n\r\nIt wraps and automates so called ESXi 'Tech Support Mode' which is effectively ssh server and number of special(poor documented) VMware  management commands.\r\n\r\nCurrently it well tested with ESXi 4.0/4.1. It should also work with ESX, but it was minimally covered by testing.\r\n\r\nRecent ESXi 5.0 support is also tested and implemented.\r\n\r\nExamples\r\n--------\r\n\r\n\t\tcat > ~/.suseviclientrc << EOF\r\n\t\tesx_server=\"esxi.example.com\"\r\n\t\tstudioserver=\"susestudio.com\"\r\n\t\tapiuser=\"your_user\"\r\n\t\tapikey=\"your_key\"\r\n\t\tEOF\r\n\r\n1) Create VM of 512MB RAM and 8GB disk with ISO attached, poweron, connect to VM console:\r\n\r\n\t\tsuseviclient.sh -c -n \"ISO Example\" -m 512 -d 8G --iso datastore1/path/to/image.iso\r\n\t\tEnter new VNC password:\r\n\t\tRepeat VNC password:\r\n\r\n* List existing VMs\r\n\r\n\t\tsuseviclient.sh -l\r\n\r\n\t\tPowerstate      VMID    VM Label                                Config file\r\n\t\t----------      ----    --------                                -----------\r\n\t\tPowered on       16     SLES4VMware 32bit      [datastore1] SLES4VMware 32bit/SLES4VMware 32bit.vmx\r\n\t\tPowered on       32     SLES4VMware 64bit      [datastore1] SLES4VMware 64bit/SLES4VMware 64bit.vmx\r\n\t\tPowered off      64     ISO Example            [datastore1] ISO Example/ISO Example.vmx\r\n\r\n* Power on VM\r\n\r\n\t\tsuseviclient.sh --poweron 64\r\n\r\nWhere 64 is VM id.\r\n\r\n* Connect to VM console\r\n\r\n\t\tsuseviclient.sh --vnc 64\r\n\r\n2) Create VM from VMDK image( includes automated conversion of desktop vmdk to server version):\r\n\r\n\t\tsuseviclient.sh -c -n \"VMDK Example\" --vmdk datastore1/path/to/image.vmdk\r\n\r\n3) Create VM from SUSE Studio appliance\r\n\r\n\t\tsuseviclient.sh -c -n \"Appliance Deployment\" --studio $appliance_id\r\n\r\n4) Create VM from PXE \r\n\r\n\t\tsuseviclient.sh -c -n \"PXE Example\" -m 512 -d 5G\r\n\r\nThis will create blank VM with network attached. If PXE is enabled in your network it should be possible to perform a network boot after the VM is powered on.\r\n\r\nFor full list of possible options see\r\n \r\n\t\tsuseviclient.sh --help\r\n\r\nInstallation\r\n------------\r\n\r\nJust download and  put suseviclient.sh somewhere in the $PATH for you convenience.\r\n\r\nShell version of suseviclient introduces no dependencies except of bash, ssh and vncviewer which can be found on almost any Linux desktop.\r\n\r\n\r\nOn the ESXi server side you have to enable ssh access, see: \r\n\r\n*http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&cmd=displayKC&externalId=1003677 for ESXi 4.0\r\n*http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&cmd=displayKC&externalId=1017910 for ESXi 4.1/5.0\r\n\r\nIt's recommended to upload your ssh key to the server to not to enter password each time as passing management command through client.\r\nThe root fs on ESXi is not permanent storage, so it's recommended to put the key on some connected datastore and automate the key copy on next reboot.\r\n\r\nAssuming that you have \"datastore1\" connected to ESXi server, do this\r\n\r\n\t\tmkdir /vmfs/volumes/datastore1/.ssh/ and place your ssh key there\r\n\r\n\t\techo \"cp -r /vmfs/volumes/datastore1/.ssh/ /\" >> /etc/rc.local\r\n\r\nThat's it. It's all you need to start using suseviclient.\r\n\r\nAll .rb files are additional modules( like web interface) and will be described separately.\r\n\r\nWeb Interface\r\n-------------\r\n\r\nWeb fronted is available with webfrontend.rb currently under initial development state but already fucntional.\r\n\r\nIt is built with \r\n\r\n* Sinatra ( http://www.sinatrarb.com/ ) ruby framework ( so please '#gem install sinatra' if you want to try) \r\n* NoVNC ( VNC client using HTML5 WebSockets, Canvas,  http://kanaka.github.com/noVNC/ ) to allow access to VMs consoles.","tagline":"Lightweight VMware ESXi management tool","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}